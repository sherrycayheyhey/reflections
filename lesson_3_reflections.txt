When would you want to use a remote repository rather than keeping all your work local?
I would use a remote repository when I had work that I actually wanted to keep! Storing files only 
locally is a recipe for disaster and saving the files at a place like GitHub is like an insurance 
policy. This would also be extremely helpful in situations where I want to share my work or work
on a project with one or more other people. 

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
It's better to manually pull changes manually because there may be changes that aren't ready to be shared or 
I may change my mind. It could create more changes than I wanted and the everything would become less 
meaningful and harder to manage. 

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Clones are copies of the entire repository and all of its commit history. You would clone a repository if 
you want a copy of an entire project, like when you want to make modifications to someone else's project 
but don't have permission to do so. A fork is a GitHub term and is the same thing as a clone except that 
it copies the repository from one GitHub account to another while clone is more about on your own machine. 
Branches are when you copy the code in the repository up to a certain point and then make changes away from
the main branch. Changes may happen to main while a branch is adding commits but eventually it can be merged
back into main if the changes it made are desirable and any conflicts are resolved. 

What is the benefit of having a copy of the last known state of the remote stored locally?
Having a copy of the last known state of the remote stored locally, even if you don't merge into it yet,
is beneficially because then you can be aware of conflicts. Conflicts take a little extra work to fix and
if you can see the latest version of the remote then maybe can avoid some and also know about changes that 
have happened so far. If you branched from a earlier commit then you have the possibility of fast-forwarding
to the remote later when you merge. 

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
If I had to collaborate without using Git or GitHub I would probably use email chains or Google Docs. The only
thing I can think of that would be easier when not using Git or GitHub is that the people I collaborate with
wouldn't have to take the time to learn Git and GitHub if they already didn't know it. I think everything else
would be more difficult because it would be hard to track stuff, we'd be sharing code fragments, and people 
would have to look through a lot of code to find what they want or figure out what the most recent change
was, it would take way too much discipline! 

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
Making changes to master in easier because there's a lot less steps you have to go through (like pulling into local repository, merging, and so on). A separate branch is useful when you want to test out a new feature, work with other people, or do something experimental but still have working code to go back to before you started messing with stuff. Unless if it's a really small project that only one person is working on, I think the added cost of using branches is total worth using them. 