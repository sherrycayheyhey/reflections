What happens when you initialize a repository? Why do you need to do it?
A .git file is added to the repository when it is initialized. It doesn't yet
contain any commits though, that's up to the user to specify. You need to
initialize the repository because Git needs to know what it should be tracking
I guess, not everything on your system will be saved this way. 

How can you use the staging area to make sure you have one commit per logical change? 
You can gather all the files you need in the staging area so that even some files 
need to be committed eventually, they won't be part of a commit if they don't make 
sense being in one. 

What are some situations when branches would be helpful in keeping your history 
organized? How would branches help? 
Branches would be helpful in situations like when I want to go back through a 
project and add features, if I were working on a project with other people, when 
I didn't want to mess up the main code or try two or more ways of doing something 
(wouldn't have to choose which was the right way because I could try both!), if I 
wanted slightly different versions of the same thing, or just when I wanted to play 
around with the code in general. Branches would help because I wouldn't have to be 
afraid of messing up the code that I already had and would let me keep track of 
changes that branched off from the main code and let me get back to things later if 
I wanted but continue to have working code to go continue with. Think of it like 
context switching, if you're going to create a new feature or fix a bug, you'll want 
to create a new branch.

How do the diagrams help you visualize the branch structure?
Diagrams help me visualize the branch structure because I can see all at once how 
everything is connected. It's easier to follow a path until it meets up with another 
commit then looking at the structures individually and then trying to create in my head. 

What is the result of merging two branches together? Why do we represent it in the 
diagram the way we do?
When two branches are merged they're combined by looking at 3 commits which are the 
common one the two share and the end points of the other two. The new commit will have 
the two endpoints as its new parents. The main branch will have any of the changes
it may have made since the branch was branched from it, plus all the new ones from
the other branch. Once the branch is merged, it can be deleted because all the 
commits will be available through the log, combined with the master ones based on
the timestamp. The branches are reperesented in the diagram in a logical way like 
it is so that it can show the departure from the main branch and a simple visual
representation can be created. 

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges 
manually?
The pros of Git's automatic merging is that lines that obviously should be included
will be so you don't have to go through a bunch of lines of code that didn't change
or that didn't conflict by hand. The downside is that you'll have to do a little work
before you can merge if there are things Git considers a conflict, even if it seemed
obvious to you what should happen. I think the tradeoffs are worth it though and its
a really useful tool that I'm looking forward to taking advantage of as I work on more
complex projects and in a collaborative manner. 




